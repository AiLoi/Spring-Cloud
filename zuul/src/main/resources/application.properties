server.port=5555

spring.application.name=api-gateway


#logging.level.root=DEBUG

#改配置定义了发往API网关服务的请求中，所有符合/api-a-url/**规则的访问都会被路由转发到 http://localhost:8080/
#zuul.routes.api-a-url.path=/api-a-url/**
#zuul.routes.api-a-url.url=http://localhost:8080/


##路由前缀,有bug，尽量不使用
zuul.prefix=/ailuoli

#zuul.strip-prefix=false

#这里直接让路由映射到具体的服务中去
zuul.routes.api-a.path=/api-a/**
zuul.routes.api-a.service-id=first-service-provider

zuul.routes.api-b.path=/api-b/**
zuul.routes.api-b.service-id=feign-consumer

#本地跳转，它是实现了将符合规则的请求转发到API网关中以/local为前缀的请求上，由API网关进行本地处理
#例：当API网关接受到的请求/api-b/hello,它符合api-b的路由规则，所以该请求会被API网关转发到网关的/local/hello请求上进行本地处理
zuul.routes.api-b.url=forward:/local



eureka.instance.instance-id=${spring.application.name}:${spring.cloud.client.ip-address}:${spring.application.instance_id:${server.port}}

#分别向两台Eureka服务器上注册自己
eureka.client.service-url.defaultZone=http://slave1:8761/eureka/,http://slave2:8762/eureka/


#加入服务进行如下配置，但是随着版本的迭代，对服务进行了拆分，拆分到了 user-service-ext中，而这些服务希望符合规则/user-service/ext/**
zuul.routes.user-service.path=/user-service/**
zuul.routes.user-service.service-id=user-service

zuul.routes.user-service-ext.path=/user-service/ext/**
zuul.routes.user-service-ext.service-id=user-service-ext
#而此时调用user-service-ext 服务的url路径实际上会同时被/user-service/**和/user-service/ext/**两个表达式所匹配，但是会按照规则先后顺序先匹配第一个服务，
#所以这里可以使用yml文件来配置，以实现有序的路由规则




#忽略表达式
#为了更加灵活的配置路由规则，Zuul还提供了一个忽略表达式参数zuul.ignored-patterns。该参数可以用来设置不希望被API网关进行路由的URL表达式

#zuul.ignored-patterns=/**/person/**



#Cookie与头信息，Zuul默认是会过滤掉Http请求头信息中的一些敏感信息，防止他们被传递到下游的外部服务器，默认的敏感头信息通过以下参数制定

#可以都设置为空来对全局头信息放行

#设置为x1后servletRequest Header 的x1不会传到下游
#zuul.sensitive-headers=x1

#设置为x2后servletRequest Header 的x2不会传到下游
#zuul.ignored-headers=x2

#Spring Security或Shiro在登录完成之后，通过重定向的方式跳转到登录页，此时登录后的请求状态码为302，请求响应头信息中的Location指向了具体的服务实例地址
#而请求头信息中的Host也指向了具体的服务实例IP地址和端口。所以该问题根本原因在于Spring Cloud Zuul在路由请求时，并没有将最初的Host信息设置正确
#这里对次参数进行设置是使得网关在进行路由转发前为请求设置Host头信息，以标识最初的服务端请求地址。
zuul.add-host-header=true

#此参数来全局关闭重试机制
#zuul.retryable=false
#
##指定服务关闭重试机制
#zuul.routes.fisrt-service-provider.retryable=false
#
#
##配置ribbon和hystrix
#
##对当前实例的重试次数进行配置
#ribbon.MaxAutoRetries=1
#
##切换实例的重试次数
#ribbon.MaxAutoRetriesNextServer=1
#
##设置请求处理的超时时间
#ribbon.ReadTimeout=5000
#
##请求连接的超时时间
#ribbon.ConnectTimeout=2000
#
##对所有操作请求进行重试
#ribbon.OkToRetryOnAllOperations=true
#
##hystrix超时时间最好大于ribbon的超时时间
##如果hystrixTimeout小于ribbonTimeout，可能在Ribbon切换实例进行重试的过程中就会触发熔断。
#hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=30000


#禁用过滤器
zuul.ThrowExceptionFilter.pre.disable=true