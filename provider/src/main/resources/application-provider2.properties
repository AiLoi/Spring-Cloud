

info.head=head
info.body=body
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
management.endpoint.shutdown.enabled=true



server.port=6002
spring.application.name=FIRST-SERVICE-PROVIDER
eureka.instance.hostname=provider
eureka.instance.instance-id=${spring.application.name}:${spring.cloud.client.ip-address}:${spring.application.instance_id:${server.port}}

#eureka.instance.instance-id=${spring.application.name}:${random.int}

#分别向两台Eureka服务器上注册自己
eureka.client.service-url.defaultZone=http://slave1:8761/eureka/,http://slave2:8762/eureka/




#服务的调用
#服务消费者在获取服务清单后，通过服务名可以获得具体提供服务的实例名和该实例的元数据信息。
#Ribbon中会默认采用轮询的方式进行调用，从而实现客户端负载均衡
#对于访问实例的选择，Eureka中有Region和Zone的概念，一个Region中可以包含多个Zone，每个服务客户端需要被注册到一个Zone中。
#所以每个客户端对应一个Region和一个Zone。在进行服务调用的时候，优先访问同处一个Zone中的服务提供方

#从eureka 服务端获取注册信息的间隔时间，默认30s
eureka.client.registry-fetch-interval-seconds=30

#启用eureka客户端  ，默认为true
eureka.client.enabled=true

#更新实例信息的变化到eureka服务端的间隔时间。默认30s
eureka.client.instance-info-replication-interval-seconds=30

#初始化实例信息到Eureka服务端的间隔时间，默认40s
eureka.client.initial-instance-info-replication-interval-seconds=40

#轮询Eureka服务端地址更改的间隔时间，单位为秒。当我们与Spring Cloud Config 配合，动态刷新Eureka的serviceURL地址时需要关注该参数
eureka.client.eureka-service-url-poll-interval-seconds=300

#读取eureka server信息的超时时间，单位为秒
eureka.client.eureka-server-read-timeout-seconds=8

#连接eureka server的超时时间，单位为秒
eureka.client.eureka-server-connect-timeout-seconds=5

#从eureka客户端到每个eureka服务端的连接总数
eureka.client.eureka-server-total-connections=200

#从eureka客户端到每个eureka服务端主机连接总数
eureka.client.eureka-server-total-connections-per-host=50

#eureka服务端连接的空闲关闭时间，默认30s
eureka.client.eureka-connection-idle-timeout-seconds=30

#心跳连接池的初始化线程数
eureka.client.heartbeat-executor-thread-pool-size=2

#心跳超时重试延迟时间的最大乘数值
eureka.client.heartbeat-executor-exponential-back-off-bound=10

#缓存刷新线程池的初始化线程数
eureka.client.cache-refresh-executor-thread-pool-size=2

#缓存刷新重试延迟时间的最大乘数值
eureka.client.cache-refresh-executor-exponential-back-off-bound=10

#使用DNS来获取eureka服务端的serviceUrl
eureka.client.use-dns-for-fetching-service-urls=false

#是否将自身的实例信息注册到eureka服务端
eureka.client.register-with-eureka=true

#是否偏好使用处于相同Zone的eureka服务端
eureka.client.prefer-same-zone-eureka=true

#获取实例时是否过滤，仅保留UP状态的实例
eureka.client.filter-only-up-instances=true

#是否从eureka服务端获取注册信息
eureka.client.fetch-registry=true